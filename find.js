// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const targetFunction = (x) => (x - 5) ** 2;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –º–∏–Ω–∏–º—É–º —Ñ—É–Ω–∫—Ü–∏–∏
function findIntervalWithMin(x0, delta) {
    let xk = x0; // –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞
    let h = delta; // –ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥
    let k = 0; // –°—á—ë—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π

    // –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    console.log(`ùõø = ${delta}, ùë•0 = ${x0}`);
    console.log("ùëñ\tùë•ùëñ\tùëì(ùë•ùëñ)");

    // –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–±—ã–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    if (targetFunction(x0) > targetFunction(x0 + delta)) {
        xk = x0 + delta; // –î–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ
        h = delta;
    } else {
        xk = x0 - delta; // –î–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ
        h = -delta;
    }

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫
    const points = [x0, xk];

    // –í—ã–≤–æ–¥ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    console.log(`${k}\t${x0.toFixed(1)}\t${targetFunction(x0).toFixed(2)}`);
    console.log(`${k + 1}\t${xk.toFixed(1)}\t${targetFunction(xk).toFixed(2)}`);

    // –®–∞–≥ 2 –∏ 3: –£–¥–≤–∞–∏–≤–∞–µ–º —à–∞–≥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
    while (true) {
        h *= 2; 
        const xNext = xk + h; 

        if (targetFunction(xk) > targetFunction(xNext)) {
            points.push(xNext); 
            k++;
            xk = xNext; 
            console.log(`${k + 1}\t${xk.toFixed(1)}\t${targetFunction(xk).toFixed(2)}`);
        } else {
            console.log(`–ò–Ω—Ç–µ—Ä–≤–∞–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–∏–Ω–∏–º—É–º: [${points[k].toFixed(1)}, ${xNext.toFixed(1)}]`);
            return [points[k], xNext]; 
        }
    }
}

const x0 = 0; 
const delta = 0.1; 

const interval = findIntervalWithMin(x0, delta);
console.log(`–ù–∞–π–¥–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–∏–Ω–∏–º—É–º: [${interval[0].toFixed(1)}, ${interval[1].toFixed(1)}]`);